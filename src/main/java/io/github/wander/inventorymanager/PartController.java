package io.github.wander.inventorymanager;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.util.Optional;

/**
 * This class handles all the logic that is involved with the execution of the <code>PartView</code>
 *
 * @author Jordan Neuenschwander
 * @version 1.0
 */
public class PartController {

    /**
     * An autogenerated unique integer value used for initializing the id of new <code>Part</code> objects
     */
    private static int nextPartId = 0;

    /**
     * A flag that is used to show when the view is executing in modify part mode or add part mode
     */
    private static boolean isModify = false;

    /**
     * The index of the part being modified
     */
    private static int modPartIndex;

    /**
     * The radio button next to the label InHouse
     */
    @FXML
    private RadioButton radioHousePart;

    /**
     * The radio button next to the label OutSourced
     */
    @FXML
    private RadioButton radioOutPart;

    /**
     * A text box used for user input of the part id
     */
    @FXML
    private TextField textPartId;

    /**
     * A text box used for user input of the part name
     */
    @FXML
    private TextField textPartName;

    /**
     * A text box used for user input of the part stock
     */
    @FXML
    private TextField textPartStock;

    /**
     * A text box used for user input of the cost per unit / price
     */
    @FXML
    private TextField textPartCPI;

    /**
     * A text box used for user input of the machine ID or company name depending on radio button selection
     */
    @FXML
    private TextField textPartMachId;

    /**
     * A text box used for user input of the minimum stock allowed
     */
    @FXML
    private TextField textPartMin;

    /**
     * A text box used for user input of the maximum stock allowed
     */
    @FXML
    private TextField textPartMax;

    /**
     * A label that is used to label the machine ID or company name text box
     */
    @FXML
    private Label labelMachIDPart;

    /**
     * Header text that changes based on modify or add part
     */
    @FXML
    private Label labelAddPart;

    /**
     * This method sets up the view to be in the state where it has the add part functionality
     * It sets a flag so the controller knows which mode the view is in.
     */
    public void addView(){
        isModify = false;
        textPartId.setText(Integer.toString(nextPartId));
        radioHousePart.setSelected(true);
        labelMachIDPart.setText("Machine ID");
    }

    /**
     * This method sets up the view to be in a "modify part" state.
     * It prints the data stored in a <code>Part</code> object to the relevant text boxes
     * and sets a flag so the controller knows what mode the view is in
     *
     * @param index the index where the <code>modifyPart</code> is located
     * @param modifyPart the part to be modified
     */
    public void modifyView(int index, Part modifyPart){
        isModify = true;
        modPartIndex = index;

        labelAddPart.setText("Modify Part");
        textPartId.setText(Integer.toString(modifyPart.getId()));
        textPartName.setText(modifyPart.getName());
        textPartStock.setText("" + modifyPart.getStock());
        textPartCPI.setText("" + modifyPart.getPrice());
        textPartMin.setText("" + modifyPart.getMin());
        textPartMax.setText("" + modifyPart.getMax());

        if (modifyPart.getClass().equals(InHouse.class)){
            textPartMachId.setText("" + ((InHouse) modifyPart).getMachineId());
        }
        else if (modifyPart.getClass().equals(OutSourced.class)){
            textPartMachId.setText(((OutSourced) modifyPart).getCompanyName());
            radioOutPart.setSelected(true);
            labelMachIDPart.setText("Company Name");
        }
    }

    /**
     * Clears the text boxes and sets the radio buttons and relevant labels to their default state
     */
    private void clearPage(){
        textPartId.clear();
        textPartName.clear();
        textPartStock.clear();
        textPartMin.clear();
        textPartMax.clear();
        textPartCPI.clear();
        textPartMachId.clear();
        radioHousePart.setSelected(true);
        labelMachIDPart.setText("Machine ID");
        labelAddPart.setText("Add Part");
    }

    /**
     * Asks the user if they would like to return to the MainView and goes to the main view upon confirmation
     *
     * @param event the event thrown when the cancel button is clicked
     *
     * @throws Exception NullPointerException when the <code>FXMLLoader</code> can not find the fxml file
     * @throws Exception IOException if FXMLLoader attempts to load a null value
     */
    @FXML
    void onClickCancel(ActionEvent event) throws Exception{
        Alert a = new Alert(Alert.AlertType.CONFIRMATION);
        a.setTitle("Cancel Confirmation");
        a.setContentText("Are you sure you want to cancel?");

        Optional<ButtonType> result = a.showAndWait();
        if (result.isPresent() && (result.get() == ButtonType.OK)) {
            clearPage();
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("MainView.fxml"));
            Node node = (Node) event.getSource();
            Stage stage = (Stage) node.getScene().getWindow();
            stage.setScene(new Scene(fxmlLoader.load(), 1055, 364));
        }
    }

    /**
     * This method checks if the in house radio button is selected.
     * If it is then it sets the label to "Machine ID" and clears the input text
     *
     * @param event the event thrown when the radio button for In House is clicked
     */
    @FXML
    void onClickRadioHouse(ActionEvent event) {
        if (radioHousePart.isSelected()) {
            labelMachIDPart.setText("Machine ID");
            textPartMachId.clear();
        }
    }

    /**
     * This method checks if the out sourced radio button is select.
     * If it is, it changes the label to "Company Name" and clears the input text
     *
     * @param event the event thrown when the radio button for out sourced is clicked
     */
    @FXML
    void onClickRadioOut(ActionEvent event) {
        if (radioOutPart.isSelected()) {
            labelMachIDPart.setText("Company Name");
        }
        textPartMachId.clear();
    }

    /**
     * This method creates a new <code>InHouse</code> or <code>OutSourced</code> object from the user input.
     * User input is validated before it is accepted.
     * It then instructs the <code>MainController</code> to either add this part or update an existing part in the list of all parts.
     * Then it changes the stage to the main view and resets the parts view to its default state
     *
     * @param event the event thrown when the save button is clicked
     *
     * @throws Exception NullPointerException if FXMLLoader cannot find the fxml file
     * @throws Exception IOException if FXMLLoader attempts to load a null value
     */
    @FXML
    void onClickSavePart(ActionEvent event) throws Exception{
        Alert a = new Alert(Alert.AlertType.ERROR);

        String userCompanyName = null;
        String userPartName = null;
        double userCPI;
        int userMin;
        int userMax;
        int userStock;
        int userPartId;
        int userMachId;


        if(!isModify){
            userPartId = nextPartId;
        }
        else {
            userPartId = Integer.parseInt(textPartId.getText());
        }

        try {
            userPartName = textPartName.getText();

            if (userPartName.isEmpty() || !userPartName.matches("[a-zA-Z]+")){
                a.setTitle("Error - Part Name invalid.");
                a.setContentText("A product name can only contain letters and must not be empty");
                a.show();
                return;
            }
        }
        catch(Exception e){
            a.setTitle("Error - Part Name invalid.");
            a.setContentText("You have entered an invalid string value for Part Name.");
            a.show();
            return;
        }

        if (userPartName == null || userPartName.isEmpty()){
            a.setTitle("Error - Part Name Invalid.");
            a.setContentText("You have entered an invalid value for Part Name.");
            a.show();
            return;
        }

        try{
            userStock = Integer.parseInt(textPartStock.getText());
            if (userStock < 0){
                throw new Exception();
            }
        }
        catch(Exception e) {
            a.setTitle("Error - Stock not a valid positive integer.");
            a.setContentText("You have entered an invalid integer value for Stock.");
            a.show();
            return;
        }

        try {
            userCPI = Double.parseDouble(textPartCPI.getText());
            if (userCPI < 0){
                throw new Exception();
            }
        }
        catch(Exception e){
            a.setTitle("Error - Cost not a valid positive double.");
            a.setContentText("You have entered an invalid double value for Cost.");
            a.show();
            return;
        }

        try{
            userMin = Integer.parseInt(textPartMin.getText());
            if (userMin < 0){
                throw new Exception();
            }
        }
        catch(Exception e){
            a.setTitle("Error - Minimum not a valid positive integer.");
            a.setContentText("You have entered an invalid integer value for Minimum.");
            a.show();
            return;
        }

        try {
            userMax = Integer.parseInt(textPartMax.getText());
            if (userMax < 0){
                throw new Exception();
            }
        }
        catch(Exception e){
            a.setTitle("Error - Maximum not a valid integer.");
            a.setContentText("You have entered an invalid integer value for Maximum.");
            a.show();
            return;
        }

        if (!(userMin <= userStock && userStock <= userMax)){
            a.setTitle("Error - Not a valid range");
            a.setContentText("Minimum and Max do not form a valid range or Stock does not fall between minimum and maximum");
            a.show();
            return;
        }

        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("MainView.fxml"));
        Node node = (Node) event.getSource();
        Stage stage = (Stage) node.getScene().getWindow();
        Scene mainScene = new Scene(fxmlLoader.load(), 1055, 364);

        MainController mainController = fxmlLoader.getController();

            if (radioHousePart.isSelected()) {
                try {
                    userMachId = Integer.parseInt(textPartMachId.getText());
                    if (userMachId < 0){
                        throw new Exception();
                    }
                }
                catch(Exception e){
                    a.setTitle("Error - Machine ID not a valid integer.");
                    a.setContentText("You have entered an invalid integer value for Machine ID.");
                    a.show();
                    return;
                }
                if(!isModify) {
                    mainController.addPart(new InHouse(userPartId, userPartName, userCPI, userStock, userMin, userMax, userMachId));
                }
                else{
                    mainController.modifyPart(modPartIndex, new InHouse(userPartId, userPartName, userCPI, userStock, userMin, userMax, userMachId));
                }
            } else {
                try {
                    userCompanyName = textPartMachId.getText();
                }
                catch(Exception e){
                    a.setTitle("Error - Company Name invalid.");
                    a.setContentText("You have entered an invalid string value for Company Name.");
                    a.show();
                }
                if (userCompanyName == null || userCompanyName.isEmpty()) {
                    a.setTitle("Error - Company Name invalid.");
                    a.setContentText("You have entered an invalid string value for Company Name.");
                    a.show();
                    return;
                }
                if(!isModify) {
                    mainController.addPart(new OutSourced(userPartId, userPartName, userCPI, userStock, userMin, userMax, userCompanyName));
                }
                else{
                    mainController.modifyPart(modPartIndex, new OutSourced(userPartId, userPartName, userCPI, userStock, userMin, userMax, userCompanyName));
                }
            }

        clearPage();

        if(!isModify){
            nextPartId++;
        }

        stage.setScene(mainScene);
    }
}